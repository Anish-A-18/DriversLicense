import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;

public class DriverInfoGUI extends JFrame {
    private DefaultTableModel tableModel;
    private JTable driverTable;
    private JButton saveButton;

    public DriverInfoGUI(LinkedList<Driver> drivers, LinkedList<String> header) {
        setTitle("Driver Information");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 400);

        // Create a table model with columns from the header
        tableModel = new DefaultTableModel();
        for (String column : header) {
            tableModel.addColumn(column);
        }

        // Add driver data to the table model
        for (Driver driver : drivers) {
            Object[] rowData = {
                    driver.FN, driver.LN, driver.gen, driver.DOB, driver.age, driver.EC, driver.Add, driver.point
            };
            tableModel.addRow(rowData);
        }

        // Create a JTable with the table model
        driverTable = new JTable(tableModel);

        // Create a scroll pane for the table
        JScrollPane scrollPane = new JScrollPane(driverTable);

        // Add the scroll pane to the frame
        add(scrollPane, BorderLayout.CENTER);

        // Create save button
        saveButton = new JButton("Save Changes to CSV");

        // Add action listener to save button
        saveButton.addActionListener(e -> saveChangesToCSV());

        // Create panel for save control
        JPanel controlPanel = new JPanel();
        controlPanel.add(saveButton);

        add(controlPanel, BorderLayout.SOUTH);
    }

    private void saveChangesToCSV() {
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("/Users/anish/Documents/DriverLincese.csv"));
            // Write the header row
            for (int i = 0; i < tableModel.getColumnCount(); i++) {
                writer.write(tableModel.getColumnName(i));
                if (i < tableModel.getColumnCount() - 1) {
                    writer.write(",");
                }
            }
            writer.write("\n");

            // Write the data rows
            for (int row = 0; row < tableModel.getRowCount(); row++) {
                for (int col = 0; col < tableModel.getColumnCount(); col++) {
                    Object value = tableModel.getValueAt(row, col);
                    writer.write(value.toString());
                    if (col < tableModel.getColumnCount() - 1) {
                        writer.write(",");
                    }
                }
                writer.write("\n");
            }

            writer.close();
            JOptionPane.showMessageDialog(this, "Changes saved to CSV file.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving changes to CSV file: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        dataLoader loader = new dataLoader();
        loader.loadCSV();

        SwingUtilities.invokeLater(() -> {
            DriverInfoGUI frame = new DriverInfoGUI(loader.getDrivers(), loader.getHeader());
            frame.setVisible(true);
        });
    }
}
